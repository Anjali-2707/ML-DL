{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "da5cf977",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "basics\n"
     ]
    }
   ],
   "source": [
    "print(\"basics\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "aa198183",
   "metadata": {},
   "outputs": [],
   "source": [
    "#assigning a value\n",
    "x = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "30c9d95d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "64f1aaf2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "#to print a string\n",
    "print(\"8\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dddab126",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "#to print a no.\n",
    "print(8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8f2f2943",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to check the type of x\n",
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f5d9f9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"to retrieve data row wise\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fe928afe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#assigning value to db(variable)\n",
    "# SNo.  NAME  ID  PERFORMANCE\n",
    "# 1   anjali 1111   good\n",
    "# 2   rahul  2222    ok\n",
    "# 3   rohit  3333   vgood\n",
    "# 4   ajay   4444    ok\n",
    "db=[[1,\"anjali\",1111,\"good\"],\n",
    "   [2,\"rahul\",2222,\"ok\"],\n",
    "    [3,\"rohit\",3333,\"vgood\"],\n",
    "    [4,\"ajay\",4444,\"ok\"],\n",
    "   ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "eea47ea8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "70552a76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 'anjali', 1111, 'good']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1st pointer is at 0 place, it gives the 1st row\n",
    "db[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9eb23614",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 'rahul', 2222, 'ok']"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "26446234",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 'rohit', 3333, 'vgood']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ce2eaa70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 'ajay', 4444, 'ok']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "8d5b5534",
   "metadata": {},
   "outputs": [],
   "source": [
    "#append is use to add\n",
    "db.append(1111)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "6a64a942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 'anjali', 1111, 'good'],\n",
       " [2, 'rahul', 2222, 'ok'],\n",
       " [3, 'rohit', 3333, 'vgood'],\n",
       " [4, 'ajay', 4444, 'ok'],\n",
       " 1111,\n",
       " 1111,\n",
       " 1111]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "71fce85b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'anjali'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#it will provide 1st row and 2nd column element\n",
    "db[0][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e6035ce8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'rohit'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db[2][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "d9b7bf85",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#db is a list so no shape, to find shape we have to convert it into an array\n",
    "db.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "325d5b35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 'anjali', 1111, 'good'],\n",
       " [2, 'rahul', 2222, 'ok'],\n",
       " [3, 'rohit', 3333, 'vgood'],\n",
       " [4, 'ajay', 4444, 'ok']]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#to have the whole range(:)\n",
    "db[:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "92e243eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 'anjali', 1111, 'good'], [2, 'rahul', 2222, 'ok']]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#exclude the 2,it will only take 0 and 1 value\n",
    "db[0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "fa39b29e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 'anjali', 1111, 'good'],\n",
       " [2, 'rahul', 2222, 'ok'],\n",
       " [3, 'rohit', 3333, 'vgood']]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#exclude the 3,it will only take 0,1,2\n",
    "db[0:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "77bac948",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "to retrieve the column data(NESTED LIST)\n"
     ]
    }
   ],
   "source": [
    "print(\"to retrieve the column data(NESTED LIST)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d9ca5713",
   "metadata": {},
   "outputs": [],
   "source": [
    "#numpy is a library\n",
    "import numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "db199978",
   "metadata": {},
   "outputs": [],
   "source": [
    "#a is a variable who has assign a value ,in numpy lib array function is imposed on db(database/table)\n",
    "a = numpy.array(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d89c34c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#array is a type of function which deal with individual row as well as column\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ec502ea1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 4)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#a is an array so now we can have the shape of a\n",
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "db614dec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['anjali', 'rahul', 'rohit', 'ajay'], dtype='<U11')"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#if we want all names(column).a comma will define weather we want a row or column\n",
    "a[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "8fbfb454",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['1', 'anjali', '1111', 'good']], dtype='<U11')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# :means selecting a range 0 to 1, but 1 will not be counted so o/p only the 0 row\n",
    "a[:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "52b8b662",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2', 'rahul', '2222', 'ok'], dtype='<U11')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we only want 2nd row\n",
    "a[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1b769c2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1111', '2222', '3333', '4444'], dtype='<U11')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[:,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "905537c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['3333', '4444'], dtype='<U11')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#if we want id of only last 2\n",
    "a[2:,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e9948ad8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "new variable and new array\n"
     ]
    }
   ],
   "source": [
    "print(\"new variable and new array\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "2360f538",
   "metadata": {},
   "outputs": [],
   "source": [
    "a1 = numpy.array([1,2,3,4,5,6,7,8]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "ad80f6fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(a1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "4b908cf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8,)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "dcb53d2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 2)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#first it is reshaped and then we want its shape, shape and reshape are functions of numpy\n",
    "a1.reshape(4,2).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "7f2e40ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linear regression\n"
     ]
    }
   ],
   "source": [
    "print(\"linear regression\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f609c95c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "af0273f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "db = pandas.read_csv(\"C:/Users/tsgur/Documents/marks.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "174dc1f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NAME</th>\n",
       "      <th>HRS</th>\n",
       "      <th>MARKS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Anjali</td>\n",
       "      <td>7</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rahul</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rohit</td>\n",
       "      <td>8</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ajay</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     NAME  HRS  MARKS\n",
       "0  Anjali    7     70\n",
       "1   Rahul    5     50\n",
       "2   Rohit    8     80\n",
       "3    Ajay    2     20"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1a42937d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5f84d4b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = db[\"MARKS\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "81c7dea3",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = db[\"HRS\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fb08b571",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9db0c47e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "z = db[\"HRS\"].values.reshape(4,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5ca89b62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    70\n",
       "1    50\n",
       "2    80\n",
       "3    20\n",
       "Name: MARKS, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "12b476ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c4ea0a37",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a8d568f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "mind = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "83ddaaba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mind.fit(z,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "52456f68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mind.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8d925629",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([60.])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mind.predict([[6]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3740e0cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "To save the program\n"
     ]
    }
   ],
   "source": [
    "print(\"To save the program\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d9baf791",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7ce89c03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['marks.pk1']"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "joblib.dump(mind, \"marks.pk1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d2e0bb17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "to load the file\n"
     ]
    }
   ],
   "source": [
    "print(\"to load the file\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ba5a6e07",
   "metadata": {},
   "outputs": [],
   "source": [
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "87843067",
   "metadata": {},
   "outputs": [],
   "source": [
    "mind = joblib.load(\"marks.pk1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4f39fa83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([50.])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mind.predict([[5]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "856ce570",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mind.coef_"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
